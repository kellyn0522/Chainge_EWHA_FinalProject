{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\uC774\\uAC00\\uC740\\\\OneDrive\\\\\\uBB38\\uC11C\\\\GitHub\\\\FinalProject\\\\moon2\\\\src\\\\context\\\\ChatContext.jsx\",\n  _s = $RefreshSig$();\nimport { createContext, useState, useEffect, useCallback } from \"react\";\nimport { getRequest, baseUrl, postRequest } from \"../utils/services\";\nimport { io } from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ChatContext = /*#__PURE__*/createContext();\nexport const ChatContextProvider = ({\n  children,\n  user\n}) => {\n  _s();\n  const [userChats, setUserChats] = useState(null);\n  const [isUserChatsLoading, setIsUserChatsLoading] = useState(false);\n  const [userChatsError, setUserChatsError] = useState(null);\n  const [potentialChats, setPotentialChats] = useState([]);\n  const [currentChat, setCurrentChat] = useState(null);\n  const [messages, setMessages] = useState(null);\n  const [isMessagesLoading, setIsMessagesLoading] = useState(false);\n  const [messagesError, setMessagesError] = useState(null);\n  const [sendTextMessageError, setSendTextMessageError] = useState(null);\n  const [newMessage, setNewMessage] = useState(null);\n  const [socket, setSocket] = useState(null);\n  const [onlineUsers, setOnlineUsers] = useState(null);\n  const [notifications, setNotifications] = useState([]);\n\n  // console.log(\"messages\", messages);\n\n  // console.log(\"onlineUsers\", onlineUsers);\n\n  console.log(\"notification\", notifications);\n  useEffect(() => {\n    const newSocket = io(\"http://localhost:3000\");\n    setSocket(newSocket);\n    return () => {\n      newSocket.disconnect();\n    };\n  }, [user]);\n\n  //add onlineUsers\n\n  useEffect(() => {\n    if (socket === null) return;\n    socket.emit(\"addNewUser\", user === null || user === void 0 ? void 0 : user._id);\n    socket.on(\"getOnlineUsers\", res => {\n      setOnlineUsers(res);\n    });\n    return () => {\n      socket.off(\"getOnlineUsers\");\n    };\n  }, [socket]);\n\n  // send Message\n  useEffect(() => {\n    var _currentChat$members;\n    if (socket === null) return;\n    const recipientId = currentChat === null || currentChat === void 0 ? void 0 : (_currentChat$members = currentChat.members) === null || _currentChat$members === void 0 ? void 0 : _currentChat$members.find(id => id !== (user === null || user === void 0 ? void 0 : user._id));\n    socket.emit(\"sendMessage\", {\n      ...newMessage,\n      recipientId\n    });\n  }, [newMessage]);\n\n  //  receive message and notification \n  useEffect(() => {\n    if (socket === null) return;\n    socket.on(\"getMessage\", res => {\n      if ((currentChat === null || currentChat === void 0 ? void 0 : currentChat._id) !== res.chatId) return;\n      setMessages(prev => [...prev, res]);\n    });\n    socket.on(\"getNotification\", res => {\n      const isChatOpen = currentChat === null || currentChat === void 0 ? void 0 : currentChat.members.some(id => id === res.senderId);\n      if (isChatOpen) {\n        setNotifications(prev => [{\n          ...res,\n          isRead: true\n        }, ...prev]);\n      } else {\n        setNotifications(prev => [res, ...prev]);\n      }\n    });\n    return () => {\n      socket.off(\"getMessage\");\n      socket.off(\"getNotification\");\n    };\n  }, [socket, currentChat]);\n  useEffect(() => {\n    const getUsers = async () => {\n      const response = await getRequest(`${baseUrl}/users`);\n      if (response.error) {\n        return console.log(\"Error fetching users\", response);\n      }\n      console.log(\"response\", response);\n      const pChats = response.filter(u => {\n        let isChatCreated = false;\n        if ((user === null || user === void 0 ? void 0 : user._id) === u._id) return false;\n        if (userChats) {\n          isChatCreated = userChats === null || userChats === void 0 ? void 0 : userChats.some(chat => {\n            return chat.members[0] === u._id || chat.members[1] === u._id;\n          });\n        }\n        return !isChatCreated;\n      });\n      setPotentialChats(pChats);\n    };\n    getUsers();\n  }, [userChats]);\n  useEffect(() => {\n    const getUserChats = async () => {\n      console.log('user:', user);\n      if (user !== null && user !== void 0 && user._id) {\n        setIsUserChatsLoading(true);\n        setUserChatsError(null);\n        const response = await getRequest(`${baseUrl}/chats/${user === null || user === void 0 ? void 0 : user._id}`);\n        setIsUserChatsLoading(false);\n        //console.log('API response:', response);\n\n        if (response.error) {\n          return setUserChatsError(response);\n        }\n        setUserChats(response);\n      }\n    };\n    getUserChats();\n  }, [user]);\n  useEffect(() => {\n    const getMessages = async () => {\n      setIsMessagesLoading(true);\n      setMessagesError(null);\n      const response = await getRequest(`${baseUrl}/messages/${currentChat === null || currentChat === void 0 ? void 0 : currentChat._id}`);\n      setIsMessagesLoading(false);\n      if (response.error) {\n        return setMessagesError(response);\n      }\n      setMessages(response);\n    };\n    getMessages();\n  }, [currentChat]);\n  const sendTextMessage = useCallback(async (textMessage, sender, currentChatId, setTextMessage) => {\n    if (!textMessage) {\n      return console.log(\"You must type something... \");\n    }\n    const response = await postRequest(`${baseUrl}/messages`, JSON.stringify({\n      chatId: currentChatId,\n      senderId: sender._id,\n      text: textMessage\n    }));\n    if (response.error) {\n      return setSendTextMessageError(response);\n    }\n    setNewMessage(response);\n    setMessages(prev => [...prev, response]);\n    setTextMessage(\"\");\n  }, []);\n  const updateCurrentChat = useCallback(chat => {\n    //console.log('Chat clicked:', chat);\n    setCurrentChat(chat);\n  }, []);\n  const createChat = useCallback(async (firstId, secondId) => {\n    const response = await postRequest(`${baseUrl}/chats`, JSON.stringify({\n      firstId,\n      secondId\n    }), {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    if (response.error) {\n      return console.log(\"Error creating chat\", response);\n    }\n    setUserChats(prev => [...prev, response]);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ChatContext.Provider, {\n    value: {\n      userChats,\n      isUserChatsLoading,\n      userChatsError,\n      potentialChats,\n      createChat,\n      updateCurrentChat,\n      messages,\n      isMessagesLoading,\n      messagesError,\n      currentChat,\n      sendTextMessage,\n      onlineUsers,\n      notifications\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 195,\n    columnNumber: 13\n  }, this);\n};\n_s(ChatContextProvider, \"ud7mPAlDk1fmyHsLH6CqwUhgXOU=\");\n_c = ChatContextProvider;\nvar _c;\n$RefreshReg$(_c, \"ChatContextProvider\");","map":{"version":3,"names":["createContext","useState","useEffect","useCallback","getRequest","baseUrl","postRequest","io","jsxDEV","_jsxDEV","ChatContext","ChatContextProvider","children","user","_s","userChats","setUserChats","isUserChatsLoading","setIsUserChatsLoading","userChatsError","setUserChatsError","potentialChats","setPotentialChats","currentChat","setCurrentChat","messages","setMessages","isMessagesLoading","setIsMessagesLoading","messagesError","setMessagesError","sendTextMessageError","setSendTextMessageError","newMessage","setNewMessage","socket","setSocket","onlineUsers","setOnlineUsers","notifications","setNotifications","console","log","newSocket","disconnect","emit","_id","on","res","off","_currentChat$members","recipientId","members","find","id","chatId","prev","isChatOpen","some","senderId","isRead","getUsers","response","error","pChats","filter","u","isChatCreated","chat","getUserChats","getMessages","sendTextMessage","textMessage","sender","currentChatId","setTextMessage","JSON","stringify","text","updateCurrentChat","createChat","firstId","secondId","headers","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/이가은/OneDrive/문서/GitHub/FinalProject/moon2/src/context/ChatContext.jsx"],"sourcesContent":["import { createContext, useState, useEffect, useCallback } from \"react\";\r\nimport { getRequest, baseUrl, postRequest } from \"../utils/services\";\r\nimport { io } from \"socket.io-client\";\r\n\r\nexport const ChatContext = createContext();\r\n\r\nexport const ChatContextProvider = ({ children, user }) => {\r\n    const [userChats, setUserChats] = useState(null);\r\n    const [isUserChatsLoading, setIsUserChatsLoading] = useState(false);\r\n    const [userChatsError, setUserChatsError] = useState(null);\r\n    const [potentialChats, setPotentialChats] = useState([]);\r\n    const [currentChat, setCurrentChat] = useState(null);\r\n    const [messages, setMessages] = useState(null);\r\n    const [isMessagesLoading, setIsMessagesLoading] = useState(false);\r\n    const [messagesError, setMessagesError] = useState(null);\r\n    const [sendTextMessageError, setSendTextMessageError] = useState(null);\r\n    const [newMessage, setNewMessage] = useState(null);\r\n    const [socket, setSocket] = useState(null);\r\n    const [onlineUsers, setOnlineUsers] = useState(null);\r\n    const [notifications, setNotifications] = useState([]);\r\n\r\n    // console.log(\"messages\", messages);\r\n\r\n    // console.log(\"onlineUsers\", onlineUsers);\r\n\r\n     console.log(\"notification\", notifications);\r\n    useEffect(() => {\r\n        const newSocket = io(\"http://localhost:3000\");\r\n        setSocket(newSocket);\r\n\r\n        return () => {\r\n            newSocket.disconnect();\r\n        };\r\n    }, [user]);\r\n\r\n    //add onlineUsers\r\n\r\n    useEffect(() => {\r\n        if (socket === null) return;\r\n        socket.emit(\"addNewUser\", user?._id);\r\n        socket.on(\"getOnlineUsers\", (res) => {\r\n            setOnlineUsers(res);\r\n        });\r\n        return () => {\r\n            socket.off(\"getOnlineUsers\");\r\n        };\r\n    }, [socket]);\r\n\r\n    // send Message\r\n    useEffect(() => {\r\n        if (socket === null) return;\r\n        const recipientId = currentChat?.members?.find((id) => id !== user?._id);\r\n\r\n        socket.emit(\"sendMessage\", { ...newMessage, recipientId })\r\n\r\n    }, [newMessage]);\r\n\r\n    //  receive message and notification \r\n    useEffect(() => {\r\n        if (socket === null) return;\r\n        \r\n        socket.on(\"getMessage\", (res) => {\r\n            if(currentChat?._id !== res.chatId ) return;\r\n\r\n            setMessages((prev) => [...prev , res]);\r\n        });\r\n\r\n        socket.on(\"getNotification\", (res) =>{\r\n            const isChatOpen = currentChat?.members.some(id => id === res.senderId);\r\n            if(isChatOpen) {\r\n                setNotifications((prev) => [{...res, isRead: true}, ...prev]);\r\n            }else{\r\n                setNotifications((prev) => [res,...prev]);\r\n            }\r\n        } );\r\n\r\n        return () => {\r\n            socket.off(\"getMessage\");\r\n            socket.off(\"getNotification\");\r\n        };\r\n    }, [socket, currentChat]);\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        const getUsers = async () => {\r\n            const response = await getRequest(`${baseUrl}/users`);\r\n\r\n            if (response.error) {\r\n                return console.log(\"Error fetching users\", response);\r\n            }\r\n\r\n            console.log(\"response\", response);\r\n\r\n\r\n            const pChats = response.filter((u) => {\r\n                let isChatCreated = false;\r\n\r\n                if (user?._id === u._id) return false;\r\n                if (userChats) {\r\n                    isChatCreated = userChats?.some((chat) => {\r\n                        return chat.members[0] === u._id || chat.members[1] === u._id;\r\n                    });\r\n                }\r\n                return !isChatCreated;\r\n            });\r\n\r\n            setPotentialChats(pChats);\r\n        };\r\n        getUsers();\r\n    }, [userChats]);\r\n\r\n    useEffect(() => {\r\n        const getUserChats = async () => {\r\n\r\n            console.log('user:', user);\r\n            if (user?._id) {\r\n                setIsUserChatsLoading(true);\r\n                setUserChatsError(null);\r\n\r\n                const response = await getRequest(`${baseUrl}/chats/${user?._id}`);\r\n                setIsUserChatsLoading(false);\r\n                //console.log('API response:', response);\r\n\r\n                if (response.error) {\r\n                    return setUserChatsError(response);\r\n                }\r\n                setUserChats(response);\r\n            }\r\n        };\r\n        getUserChats();\r\n    }, [user]);\r\n\r\n    useEffect(() => {\r\n        const getMessages = async () => {\r\n\r\n            setIsMessagesLoading(true);\r\n            setMessagesError(null);\r\n\r\n            const response = await getRequest(`${baseUrl}/messages/${currentChat?._id}`);\r\n            setIsMessagesLoading(false);\r\n\r\n            if (response.error) {\r\n                return setMessagesError(response);\r\n            }\r\n            setMessages(response);\r\n\r\n        };\r\n        getMessages();\r\n    }, [currentChat]);\r\n\r\n    const sendTextMessage = useCallback(async (textMessage, sender, currentChatId, setTextMessage) => {\r\n\r\n        if (!textMessage) { return console.log(\"You must type something... \"); }\r\n\r\n        const response = await postRequest(`${baseUrl}/messages`, JSON.stringify({\r\n            chatId: currentChatId,\r\n            senderId: sender._id,\r\n            text: textMessage\r\n        })\r\n        );\r\n        if (response.error) {\r\n            return setSendTextMessageError(response);\r\n        }\r\n        setNewMessage(response);\r\n        setMessages((prev) => [...prev, response]);\r\n        setTextMessage(\"\");\r\n\r\n    },\r\n        []);\r\n\r\n\r\n\r\n    const updateCurrentChat = useCallback((chat) => {\r\n        //console.log('Chat clicked:', chat);\r\n        setCurrentChat(chat);\r\n    }, []);\r\n\r\n    const createChat = useCallback(async (firstId, secondId) => {\r\n        const response = await postRequest(`${baseUrl}/chats`,\r\n            JSON.stringify({\r\n                firstId,\r\n                secondId,\r\n            }), {\r\n            headers: { \"Content-Type\": \"application/json\" }\r\n        }\r\n\r\n        );\r\n        if (response.error) {\r\n            return console.log(\"Error creating chat\", response);\r\n        }\r\n        setUserChats((prev) => [...prev, response]);\r\n    }, []);\r\n\r\n    return (<ChatContext.Provider value={{\r\n        userChats,\r\n        isUserChatsLoading,\r\n        userChatsError,\r\n        potentialChats,\r\n        createChat,\r\n        updateCurrentChat,\r\n        messages,\r\n        isMessagesLoading,\r\n        messagesError,\r\n        currentChat,\r\n        sendTextMessage,\r\n        onlineUsers,\r\n        notifications,\r\n\r\n\r\n    }}>\r\n        {children}\r\n    </ChatContext.Provider>\r\n    );\r\n\r\n};"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AACvE,SAASC,UAAU,EAAEC,OAAO,EAAEC,WAAW,QAAQ,mBAAmB;AACpE,SAASC,EAAE,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,OAAO,MAAMC,WAAW,gBAAGV,aAAa,CAAC,CAAC;AAE1C,OAAO,MAAMW,mBAAmB,GAAGA,CAAC;EAAEC,QAAQ;EAAEC;AAAK,CAAC,KAAK;EAAAC,EAAA;EACvD,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACgB,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;EACnE,MAAM,CAACkB,cAAc,EAAEC,iBAAiB,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAACoB,cAAc,EAAEC,iBAAiB,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACsB,WAAW,EAAEC,cAAc,CAAC,GAAGvB,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACwB,QAAQ,EAAEC,WAAW,CAAC,GAAGzB,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAAC0B,iBAAiB,EAAEC,oBAAoB,CAAC,GAAG3B,QAAQ,CAAC,KAAK,CAAC;EACjE,MAAM,CAAC4B,aAAa,EAAEC,gBAAgB,CAAC,GAAG7B,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAAC8B,oBAAoB,EAAEC,uBAAuB,CAAC,GAAG/B,QAAQ,CAAC,IAAI,CAAC;EACtE,MAAM,CAACgC,UAAU,EAAEC,aAAa,CAAC,GAAGjC,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAACkC,MAAM,EAAEC,SAAS,CAAC,GAAGnC,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACoC,WAAW,EAAEC,cAAc,CAAC,GAAGrC,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACsC,aAAa,EAAEC,gBAAgB,CAAC,GAAGvC,QAAQ,CAAC,EAAE,CAAC;;EAEtD;;EAEA;;EAECwC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEH,aAAa,CAAC;EAC3CrC,SAAS,CAAC,MAAM;IACZ,MAAMyC,SAAS,GAAGpC,EAAE,CAAC,uBAAuB,CAAC;IAC7C6B,SAAS,CAACO,SAAS,CAAC;IAEpB,OAAO,MAAM;MACTA,SAAS,CAACC,UAAU,CAAC,CAAC;IAC1B,CAAC;EACL,CAAC,EAAE,CAAC/B,IAAI,CAAC,CAAC;;EAEV;;EAEAX,SAAS,CAAC,MAAM;IACZ,IAAIiC,MAAM,KAAK,IAAI,EAAE;IACrBA,MAAM,CAACU,IAAI,CAAC,YAAY,EAAEhC,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEiC,GAAG,CAAC;IACpCX,MAAM,CAACY,EAAE,CAAC,gBAAgB,EAAGC,GAAG,IAAK;MACjCV,cAAc,CAACU,GAAG,CAAC;IACvB,CAAC,CAAC;IACF,OAAO,MAAM;MACTb,MAAM,CAACc,GAAG,CAAC,gBAAgB,CAAC;IAChC,CAAC;EACL,CAAC,EAAE,CAACd,MAAM,CAAC,CAAC;;EAEZ;EACAjC,SAAS,CAAC,MAAM;IAAA,IAAAgD,oBAAA;IACZ,IAAIf,MAAM,KAAK,IAAI,EAAE;IACrB,MAAMgB,WAAW,GAAG5B,WAAW,aAAXA,WAAW,wBAAA2B,oBAAA,GAAX3B,WAAW,CAAE6B,OAAO,cAAAF,oBAAA,uBAApBA,oBAAA,CAAsBG,IAAI,CAAEC,EAAE,IAAKA,EAAE,MAAKzC,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEiC,GAAG,EAAC;IAExEX,MAAM,CAACU,IAAI,CAAC,aAAa,EAAE;MAAE,GAAGZ,UAAU;MAAEkB;IAAY,CAAC,CAAC;EAE9D,CAAC,EAAE,CAAClB,UAAU,CAAC,CAAC;;EAEhB;EACA/B,SAAS,CAAC,MAAM;IACZ,IAAIiC,MAAM,KAAK,IAAI,EAAE;IAErBA,MAAM,CAACY,EAAE,CAAC,YAAY,EAAGC,GAAG,IAAK;MAC7B,IAAG,CAAAzB,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEuB,GAAG,MAAKE,GAAG,CAACO,MAAM,EAAG;MAErC7B,WAAW,CAAE8B,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAGR,GAAG,CAAC,CAAC;IAC1C,CAAC,CAAC;IAEFb,MAAM,CAACY,EAAE,CAAC,iBAAiB,EAAGC,GAAG,IAAI;MACjC,MAAMS,UAAU,GAAGlC,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAE6B,OAAO,CAACM,IAAI,CAACJ,EAAE,IAAIA,EAAE,KAAKN,GAAG,CAACW,QAAQ,CAAC;MACvE,IAAGF,UAAU,EAAE;QACXjB,gBAAgB,CAAEgB,IAAI,IAAK,CAAC;UAAC,GAAGR,GAAG;UAAEY,MAAM,EAAE;QAAI,CAAC,EAAE,GAAGJ,IAAI,CAAC,CAAC;MACjE,CAAC,MAAI;QACDhB,gBAAgB,CAAEgB,IAAI,IAAK,CAACR,GAAG,EAAC,GAAGQ,IAAI,CAAC,CAAC;MAC7C;IACJ,CAAE,CAAC;IAEH,OAAO,MAAM;MACTrB,MAAM,CAACc,GAAG,CAAC,YAAY,CAAC;MACxBd,MAAM,CAACc,GAAG,CAAC,iBAAiB,CAAC;IACjC,CAAC;EACL,CAAC,EAAE,CAACd,MAAM,EAAEZ,WAAW,CAAC,CAAC;EAIzBrB,SAAS,CAAC,MAAM;IACZ,MAAM2D,QAAQ,GAAG,MAAAA,CAAA,KAAY;MACzB,MAAMC,QAAQ,GAAG,MAAM1D,UAAU,CAAC,GAAGC,OAAO,QAAQ,CAAC;MAErD,IAAIyD,QAAQ,CAACC,KAAK,EAAE;QAChB,OAAOtB,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEoB,QAAQ,CAAC;MACxD;MAEArB,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEoB,QAAQ,CAAC;MAGjC,MAAME,MAAM,GAAGF,QAAQ,CAACG,MAAM,CAAEC,CAAC,IAAK;QAClC,IAAIC,aAAa,GAAG,KAAK;QAEzB,IAAI,CAAAtD,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEiC,GAAG,MAAKoB,CAAC,CAACpB,GAAG,EAAE,OAAO,KAAK;QACrC,IAAI/B,SAAS,EAAE;UACXoD,aAAa,GAAGpD,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAE2C,IAAI,CAAEU,IAAI,IAAK;YACtC,OAAOA,IAAI,CAAChB,OAAO,CAAC,CAAC,CAAC,KAAKc,CAAC,CAACpB,GAAG,IAAIsB,IAAI,CAAChB,OAAO,CAAC,CAAC,CAAC,KAAKc,CAAC,CAACpB,GAAG;UACjE,CAAC,CAAC;QACN;QACA,OAAO,CAACqB,aAAa;MACzB,CAAC,CAAC;MAEF7C,iBAAiB,CAAC0C,MAAM,CAAC;IAC7B,CAAC;IACDH,QAAQ,CAAC,CAAC;EACd,CAAC,EAAE,CAAC9C,SAAS,CAAC,CAAC;EAEfb,SAAS,CAAC,MAAM;IACZ,MAAMmE,YAAY,GAAG,MAAAA,CAAA,KAAY;MAE7B5B,OAAO,CAACC,GAAG,CAAC,OAAO,EAAE7B,IAAI,CAAC;MAC1B,IAAIA,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEiC,GAAG,EAAE;QACX5B,qBAAqB,CAAC,IAAI,CAAC;QAC3BE,iBAAiB,CAAC,IAAI,CAAC;QAEvB,MAAM0C,QAAQ,GAAG,MAAM1D,UAAU,CAAC,GAAGC,OAAO,UAAUQ,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEiC,GAAG,EAAE,CAAC;QAClE5B,qBAAqB,CAAC,KAAK,CAAC;QAC5B;;QAEA,IAAI4C,QAAQ,CAACC,KAAK,EAAE;UAChB,OAAO3C,iBAAiB,CAAC0C,QAAQ,CAAC;QACtC;QACA9C,YAAY,CAAC8C,QAAQ,CAAC;MAC1B;IACJ,CAAC;IACDO,YAAY,CAAC,CAAC;EAClB,CAAC,EAAE,CAACxD,IAAI,CAAC,CAAC;EAEVX,SAAS,CAAC,MAAM;IACZ,MAAMoE,WAAW,GAAG,MAAAA,CAAA,KAAY;MAE5B1C,oBAAoB,CAAC,IAAI,CAAC;MAC1BE,gBAAgB,CAAC,IAAI,CAAC;MAEtB,MAAMgC,QAAQ,GAAG,MAAM1D,UAAU,CAAC,GAAGC,OAAO,aAAakB,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEuB,GAAG,EAAE,CAAC;MAC5ElB,oBAAoB,CAAC,KAAK,CAAC;MAE3B,IAAIkC,QAAQ,CAACC,KAAK,EAAE;QAChB,OAAOjC,gBAAgB,CAACgC,QAAQ,CAAC;MACrC;MACApC,WAAW,CAACoC,QAAQ,CAAC;IAEzB,CAAC;IACDQ,WAAW,CAAC,CAAC;EACjB,CAAC,EAAE,CAAC/C,WAAW,CAAC,CAAC;EAEjB,MAAMgD,eAAe,GAAGpE,WAAW,CAAC,OAAOqE,WAAW,EAAEC,MAAM,EAAEC,aAAa,EAAEC,cAAc,KAAK;IAE9F,IAAI,CAACH,WAAW,EAAE;MAAE,OAAO/B,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;IAAE;IAEvE,MAAMoB,QAAQ,GAAG,MAAMxD,WAAW,CAAC,GAAGD,OAAO,WAAW,EAAEuE,IAAI,CAACC,SAAS,CAAC;MACrEtB,MAAM,EAAEmB,aAAa;MACrBf,QAAQ,EAAEc,MAAM,CAAC3B,GAAG;MACpBgC,IAAI,EAAEN;IACV,CAAC,CACD,CAAC;IACD,IAAIV,QAAQ,CAACC,KAAK,EAAE;MAChB,OAAO/B,uBAAuB,CAAC8B,QAAQ,CAAC;IAC5C;IACA5B,aAAa,CAAC4B,QAAQ,CAAC;IACvBpC,WAAW,CAAE8B,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAEM,QAAQ,CAAC,CAAC;IAC1Ca,cAAc,CAAC,EAAE,CAAC;EAEtB,CAAC,EACG,EAAE,CAAC;EAIP,MAAMI,iBAAiB,GAAG5E,WAAW,CAAEiE,IAAI,IAAK;IAC5C;IACA5C,cAAc,CAAC4C,IAAI,CAAC;EACxB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMY,UAAU,GAAG7E,WAAW,CAAC,OAAO8E,OAAO,EAAEC,QAAQ,KAAK;IACxD,MAAMpB,QAAQ,GAAG,MAAMxD,WAAW,CAAC,GAAGD,OAAO,QAAQ,EACjDuE,IAAI,CAACC,SAAS,CAAC;MACXI,OAAO;MACPC;IACJ,CAAC,CAAC,EAAE;MACJC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB;IAClD,CAEA,CAAC;IACD,IAAIrB,QAAQ,CAACC,KAAK,EAAE;MAChB,OAAOtB,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEoB,QAAQ,CAAC;IACvD;IACA9C,YAAY,CAAEwC,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAEM,QAAQ,CAAC,CAAC;EAC/C,CAAC,EAAE,EAAE,CAAC;EAEN,oBAAQrD,OAAA,CAACC,WAAW,CAAC0E,QAAQ;IAACC,KAAK,EAAE;MACjCtE,SAAS;MACTE,kBAAkB;MAClBE,cAAc;MACdE,cAAc;MACd2D,UAAU;MACVD,iBAAiB;MACjBtD,QAAQ;MACRE,iBAAiB;MACjBE,aAAa;MACbN,WAAW;MACXgD,eAAe;MACflC,WAAW;MACXE;IAGJ,CAAE;IAAA3B,QAAA,EACGA;EAAQ;IAAA0E,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAG3B,CAAC;AAAC3E,EAAA,CAjNWH,mBAAmB;AAAA+E,EAAA,GAAnB/E,mBAAmB;AAAA,IAAA+E,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}